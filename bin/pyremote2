#!/bin/bash

_do_open() {
    [[ ! -z "${SERVER}" ]] || _show_help
    remote_uri=$( _get_saved_connection ${SERVER} )
    if [[ ! -z "${remote_uri}" ]]; then
        echo "Remote Jupyter server is already running."
    else
        ssh ${SERVER} './jupyter-serve --start'
        remote_info=$( ssh ${SERVER} './jupyter-serve --get-uri-info' )
        remote_uri=$( echo ${remote_info} | awk '{print $1}' )
        remote_host=$( echo ${remote_info} | awk '{print $2}' )
        echo "Remote Jupyter server is running at: ${remote_uri}"
        if [[ ! -z "${remote_uri}" ]]; then
            #remote_host=$(  echo "${remote_uri}" | sed -e "s/[^/]*\/\/\([^:]*\):\([^\?]*\)\/?token=\(.*\)/\1/" )
            remote_port=$(  echo "${remote_uri}" | sed -e "s/[^/]*\/\/\([^:]*\):\([^\?]*\)\/?token=\(.*\)/\2/" )
            remote_token=$( echo "${remote_uri}" | sed -e "s/[^/]*\/\/\([^:]*\):\([^\?]*\)\/?token=\(.*\)/\3/" )
            echo "Host: ${remote_host}"
            echo "Port: ${remote_port}"
            echo "Token: ${remote_token}"
            if [[ ! -z ${remote_port} ]]; then
                ssh-localportfwd open ${SERVER} ${remote_port} ${remote_port} ${remote_host}
                _do_save ${remote_uri}
            else
                echo "Error: Could not find remote port."
            fi
        else
            echo "Error: Could not find URI of remote server."
        fi
    fi
}


_do_close() {
    [[ ! -z "${SERVER}" ]] || _show_help
    remote_uri=$( _get_saved_connection ${SERVER} )
    if [[ ! -z "${remote_uri}" ]]; then
        remote_port=$(  echo "${remote_uri}" | sed -e "s/[^/]*\/\/\([^:]*\):\([^\?]*\)\/?token=\(.*\)/\2/" )
        if [[ ! -z ${remote_port} ]]; then
            ssh-localportfwd close ${SERVER} ${remote_port} ${remote_port}
            [[ $? == 0 ]] && _do_remove_saved
            ssh ${SERVER} './jupyter-serve --stop'
        else
            echo "Error: Could not find remote port."
        fi
    else
        echo "Error: Could not find remote connection."
    fi
}

_do_list() {
    if [[ -d "${TMPDIR}" ]]; then
        for file in ${TMPDIR}/*.remote; do
            #__server=$( basename ${file} .remote)
            #echo "${__server%'.remote'}:: $( cat ${file} )"
            [[ -f ${file} ]] && echo "$( basename ${file} .remote) :: $( cat ${file} )"
        done
    fi
}


_do_save() {
    [[ -d "${TMPDIR}" ]] || mkdir -p ${TMPDIR}
    [[ ! -z "${1}" ]] && echo "${1}" > ${TMPDIR}/${SERVER}.remote
}


_is_saved_connection() {
    [[ -f ${TMPDIR}/${SERVER}.remote ]] && return 0 || return 1
}

_get_saved_connection() {
    _is_saved_connection && cat ${TMPDIR}/${SERVER}.remote
}


_do_remove_saved() {
    _is_saved_connection && rm -f ${TMPDIR}/${SERVER}.remote
}


_show_help() {
    CMD="$( basename ${BASH_SOURCE[0]} )"
    echo "Open or close remote Jupyter Notebook server."
    echo "Usage:   "
    echo "   $CMD open  <user@server>"
    echo "   $CMD close <user@server>"
    exit
}

TMPDIR=~/.tmp/pyremote-server
CMD=${1}
SERVER=${2}

#[[ "${CMD}" == "open" ]] || [[ "${CMD}" == "close" ]] || [[ "${CMD}" == "list" ]] || _show_help

case "${CMD}" in
    "")
        _show_help
        ;;

    "open")
        _do_open
        ;;

    "close")
        _do_close
        ;;

    "list")
        _do_list
        ;;
        
    *)
        _show_help
        ;;
esac
