#!/bin/bash

DOTFILES=~/.dotfiles
DRYRUN=${1:-false}

_dryrun() {
    [[ "${DRYRUN}" == "dryrun" ]] && return 0 || return 1
}

# Logging stuff.
function _log()       { echo "$( pwd ) > ${@}"; }
function e_header()   { echo -e "\n\033[1m$@\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()    { echo -e " \033[1;34m➜\033[0m  $@"; }


if _dryrun; then
    e_arrow "This is a dryrun."
fi

# Destination may or may not be relative to $HOME
# Destination may be a FILE or DIRECTORY
# Source is always some file in the DOTFILES,
# which must be located at ~/.dotfiles

function backup_and_link() {

    __dest=${1}
    __dotfile=${DOTFILES}/${2}
    __forcelink=${3:-false}

    e_header "${__dest}"

    # remember current location
    __cwd=$( pwd )
    # the filepath may have been provided relative to HOME
    cd ${HOME}


    # ================
    # Checks
    # ================
    __do_action=0

    # are source and destination same?
    [[ "${__dest}" -ef "${__dotfile}" ]] && __do_action=1 && e_error "Skip: same file."

    # do we need to try a forced action if the above check failed?
    # only check forceact if the above check failed.
    if [[ "${__do_action}" == "1" ]]; then
        [[ "${__forcelink}" == "force" ]] && __do_action=0 && e_error "Warn: force link."
    fi

    # do the dotfile exist?
    # must abort the process, even if forceact is true.
    [[ ! -r ${__dotfile} ]] && __do_action=1 && e_error "Fatal: ${__dotfile} not found."

    # ================
    # Main action
    # ================
    if [[ "${__do_action}" == "0" ]]; then
        
        # find the destination file name and directory
        __destbase=$( basename ${__dest} )
        __destdir=$( dirname ${__dest} )

        # create the destination directory is absent
        ! _dryrun && [[ ! -d ${__destdir} ]] && mkdir -p ${__destdir}

        # backup if destination exists and 
        if [[ -e ${__dest} ]]; then 
            e_arrow "Backing up ${__dest}"
            BACKUPFLAG=1
            [[ ! -d "${BACKUPDIR}" ]] && ! _dryrun && mkdir -p ${BACKUPDIR}
            ! _dryrun && mv "${__dest}" "${BACKUPDIR}"
        fi

        # the actual link
        e_success "Linking ${__dest} to ${__dotfile}."
        if ! _dryrun; then
            cd ${__destdir}
            ln -s --force ${__dotfile} ${__destbase}
            cd ${HOME}
        fi
    fi
    # do not forget to move back to the directory where the command was launched from
    cd ${__cwd}
}

BACKUPDIR="${HOME}/.backdotfiles/$(date "+%Y_%m_%d-%H_%M_%S")/"
BACKUPFLAG=

backup_and_link .bashrc bash/bashrc
backup_and_link .ssh/config ssh/config
backup_and_link .vimrc vim/vimrc
backup_and_link .vim vim/dotvim
backup_and_link .jupyter/custom/custom.css python/jupyter_custom.css

if [[ "${BACKUPFLAG}" == "1" ]]; then
    echo -e "\nBackups were moved to ${BACKUPDIR}"
fi
