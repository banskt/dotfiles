#!/usr/bin/env bash

source "${HOME}/.bashrc"

my_scriptdir="/media/sdt/banskt/usr/scripts"
source "${my_scriptdir}/logging-helpers.sh"
source "${my_scriptdir}/rtcontrol-helpers.sh"
source "${my_scriptdir}/mktorrent-helpers.sh" # provides _btn_mktorrent to load directly into client


if [[ -f "${HOME}/btn-autopack.cfg" ]]; then
    source "${HOME}/btn-autopack.cfg"
else
    echo "Configuration file ${HOME}/btn-autopack.cfg not found. Exiting."
    exit 1
fi

################################################
### Variables imported from configuration files
################################################
### BTN_PACKBASE_DIR - the base directory where packs are created.
###     A new directory is created here for packing the season.
### BTN_METAWATCH_DL_DIR - directory where rtorrent watches for metafiles to download.
###     Putting metafiles here will automatically start downloads.
###     This automation has been configured with rtorrent.
### BTN_METAWATCH_UL_DIR - directory where rtorrent watches for metafiles to upload.
###     Putting metafiles here will automatically start uploads.
###     This automation has been configured with rtorrent.
### BTN_STAGING_DIR  - directory for created torrents and mediainfo.
### BTN_AUTHKEY      - authorization key.
### BTN_TORRENTPASS  - passkey for torrents.
### BTN_ANNOUNCE     - announce URL.
### BTN_SITEURL      - domain name of the website.
### BTN_AUTOPACK_LOGDIR - directory where logs will be stored.
### BTN_AUTOPACK_TMPDIR - directory where temporary files will be stored.
################################################


_do_endscript() {
    echo "FAILED."
    exit 1
}


_has_array_value() {
	local needle="$1"   # Save first argument in a variable
	shift               # Shift all arguments to the left (original $1 gets lost)
	local haystack=("$@") # Rebuild the array with rest of arguments
	for value in "${haystack[@]}"; do
		if [[ "$value" == "$needle" ]]; then
			return 0
		fi
	done
	return 1
}


_get_torrent_url_from_id() {
    echo "${BTN_SITEURL}/torrents.php?action=download&id=${1}&authkey=${BTN_AUTHKEY}&torrent_pass=${BTN_TORRENTPASS}"
}


_download_metafile() {
    local tid
    local metafile
    local torrent_url
    #
    tid="${1}"
    metafile="${2}"
    # Debug and logs
    _dbglog "Downloading metafile for torrent ID ${tid}."
    #
    # BTN URL from torrent ID
    torrent_url=$( _get_torrent_url_from_id "${tid}" )
    #
    # Old metafiles may exist (e.g. during resubmitting a job)
    # If it is a download error (not a torrent file), remove. Keep otherwise.
    if [[ -f "${metafile}" ]]; then
        _dbglog "${metafile} exists."
        _is_rt_metafile_ok "${metafile}" || { _vlog "Error in metafile. Remove and download again." && rm -f "${metafile}"; }
    fi
    #
    # The main download loop: 
    # curl following redirects.
    if [[ ! -f ${metafile} ]]; then
        _vlog "Download metafile from: "
        _vlog "    ${torrent_url}"
        if _is_verbose; then
            curl -JL "${torrent_url}" -o "${metafile}"
        else
            curl -JL "${torrent_url}" -o "${metafile}" --silent
        fi
    fi
    _is_rt_metafile_ok "${metafile}" || return 1
}


_is_download_complete() {
    # How to check if download is complete for a given metafile?
    # There can be hundreds of ways to check.
    # Here, I use a simple hash check from client.
	local lhash="${1}"
	comp_pct=$( rtcontrol -qo 'done' hash="${lhash}" )
    [[ "${comp_pct}" == "100.0" ]] || return 1
}


_wait_till_dl_complete() {
	local lhash_array=( "$@" )
	local dl_complete_array=()
	for lhash in "${lhash_array[@]}"; do
		_is_download_complete "${lhash}" && dl_complete_array+=( "${lhash}" )
	done
	#------- some logging to show progreess ---------
	_vlog "Number of torrents to download: ${#lhash_array[@]}"
	_vlog "    Number of complete downloads: ${#dl_complete_array[@]}"
	# -----------------
	# loop until complete
	until [[ "${#lhash_array[@]}" == "${#dl_complete_array[@]}" ]]
	do
		_vlog "    Waiting for all downloads to complete ..."
		sleep 60
		for lhash in "${lhash_array[@]}"; do
			if ! _has_array_value "${lhash}" "${dl_complete_array[@]}"; then
				_dbglog "    ${lhash} : Check again"
				_is_download_complete "${lhash}" && dl_complete_array+=( "${lhash}" )
			else
				_dbglog "    ${lhash} : Already completed. Skip check."
			fi
		done
		_vlog "    Number of complete downloads: ${#dl_complete_array[@]}"
	done
}


_show_help() {
    exitcode=${1}
    if [[ ! -z "${2}" ]]; then
        echo "Error: ${2}"
        echo ""
    fi
    echo "btn-autopack: Download and pack seasons from BTN."
    echo "Usage:"
    echo "    btn-autopack [OPTIONS] -b <id1> <id2> ... -r <release_name> -d <directory_name>"
    echo "Flags:"
    echo "    -b | --btnid      list of torrent IDs from BTN"
    echo "    -r | --release    release name following BTN convention"
    echo "Options:"
    echo "    -d | --dir        name of the directory where episodes will be kept"
    echo "    -h | --help       show this help and exit"
    echo "    -v | --verbose    show detailed information"
    echo ""
    [[ $exitcode == 0 ]] && exit 0 || exit 1
}


DEBUG_FLAG=0
VERBOSE_FLAG=0
dateflag=$( date +"%Y-%m-%d" )

# Process arguments from command line
btnid_array=()
while [[ $# -gt 0 ]]; do
    key="${1}"
    _dbglog "Current key = ${1}"
    _dbglog "Next key = ${2}"
    case ${key} in
        "-b" | "--btnid")
            while [[ ! -z "${2}" && "${2}" != "-"* ]]; do
                _dbglog "  Key is ${2}. Grab!"
                btnid_array+=( "${2}" )
                shift
            done
            shift;;
        "-r" | "--release")
            release_name=${2}
            shift
            shift;;
        "-d" | "--dir")
            packdir_name=${2}
            shift
            shift;;
        "-v" | "--verbose")
            VERBOSE_FLAG=1
            shift;;
        "--debug")
            DEBUG_FLAG=1
            shift;;
        "-h" | "--help")
            _show_help 0;
            shift;;
        *)
            _show_help 1 "Wrong command"
            shift;;
    esac
done

#
# simple check if input is correct
#
_dbglog "${release_name}"
[[ ! -z "${release_name}" ]] || _show_help 1 "Please provide a release name"
[[ "${#btnid_array[@]}" -gt 1 ]] || _show_help 1 "Please provide more than one torrent IDs"

#
# setup logfile, tmpfile, etc
# create directories if required
#
mkdir -p "${BTN_AUTOPACK_LOGDIR}/${dateflag}"
SB_BASHLOG_FILE="${BTN_AUTOPACK_LOGDIR}/${dateflag}/${release_name}.log"
release_tempdir=$( mktemp --tmpdir="${BTN_AUTOPACK_TMPDIR}" -d "${release_name}".XXX )
# double quotes expands now rather than when signalled
trap "rm -rf ${release_tempdir}" EXIT INT QUIT TERM


# Create the requested directory for the season pack
if [[ -z "${packdir_name}" ]]; then
    _vlog "Using release name as directory"
    packdir_name="${release_name}"
fi
packdir_path="${BTN_PACKBASE_DIR}/${packdir_name}"
mkdir -p "${packdir_path}"

# Staging path
# just a short code instead of calling the full path
stage_prefix="${BTN_STAGING_DIR}/${release_name}"

#
#
_filelog ""
_filelog "------------------------------"
_filelog "Release Name: ${release_name}"
_filelog "Target Directory: ${packdir_path}"
_filelog "Number of episodes: " "${#btnid_array[@]}"
_filelog "BTN Torrent IDs: " "${btnid_array[@]}"
_filelog "------------------------------"
_filelog ""

# Download the torrent metafiles from BTN
# in a temporary directory
_filelog "Downloading meta files from BTN."
mkdir -p "${release_tempdir}/metafiles"
metafile_array=()
for btnid in "${btnid_array[@]}"; do
    _dbglog "BTN Torrent ID: ${btnid}"
    metafile_path="${release_tempdir}/metafiles/${btnid}.torrent"
    _download_metafile "${btnid}" "${metafile_path}" || _do_endscript
    metafile_array+=( "${metafile_path}" )
done

# Put the torrent files in watch directory.
# This will automatically start the download.
# So, be careful not to download stuff twice.
_filelog "Sending meta files to rtorrent watch directory."
thash_array=()
for metafile in "${metafile_array[@]}"; do
    _dbglog "Check if file ${metafile} is already downloaded"
    thash=$( lstor -qo __hash__ "${metafile}" )
    thash_array+=( "${thash}" )
    { rtcontrol -qo 'is_open' hash="${thash}"; } || cp -f "${metafile}" "${BTN_METAWATCH_DL_DIR}"
done

_wait_till_dl_complete "${thash_array[@]}"


# Symlink when downloads are complete
_filelog "Link downloaded files to season pack directory."
for thash in "${thash_array[@]}"; do
	sourcepath=$( rtcontrol -qo 'path' hash="${thash}" )
	targetpath="${packdir_path}/"$( basename "${sourcepath}" )
	[[ -f "${targetpath}" ]] || ln "${sourcepath}" "${targetpath}" || _do_endscript
done


# Create torrent file using mktorrent
_filelog "Creating torrent file."
_btn_mktorrent "${stage_prefix}.torrent" "${packdir_path}" "${BTN_ANNOUNCE}" || _do_endscript


# Create mediainfo file for uploading
_filelog "Creating mediainfo file."
episode1_filename=$( lstor -qo info.name "${metafile_array[0]}" )
[[ -f "${stage_prefix}.info" ]] && rm -f "${stage_prefix}.info"
mediainfo "${packdir_path}/${episode1_filename}" >> "${stage_prefix}.info"

# Load torrents to rTorrent?
cp "${stage_prefix}.torrent" "${BTN_METAWATCH_UL_DIR}"

# Cleanup temporary directory containing metafiles
rm -rf "${release_tempdir}"

_filelog "SUCCESS"
touch "${stage_prefix}.done"
exit 0
