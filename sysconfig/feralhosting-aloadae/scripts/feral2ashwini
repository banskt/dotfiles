#!/usr/bin/env bash

# In this script, quoting is important as filenames
# are involved. Invariably, there are bugs
# which I will fix as I keep working on this. 
# Here are some references
#     https://stackoverflow.com/q/10067266
#     https://stackoverflow.com/q/29142
# A robust alternative is to use a file descriptor
#     https://stackoverflow.com/a/66179139
#
# Naming convention
#     https://stackoverflow.com/q/673055
#
#
my_scriptdir="${HOME}/usr/scripts"
my_logdir="${HOME}/usr/log/archive"
my_tmpdir="${HOME}/usr/tmp/archive"
my_configdir="${HOME}/usr/archive-config"

source "${HOME}/.bashrc"
source "${my_scriptdir}/logging-helpers.sh"
source "${my_scriptdir}/rtcontrol-helpers.sh"
source "${my_scriptdir}/rsync-helpers.sh"

# =================================================
# Fixed arguments
# =================================================
dateflag=$( date +"%Y-%m-%d" )
randflag=$( cat /dev/urandom | tr -cd 'a-z0-9' | head -c 6 )

VERBOSE_FLAG=0
DEBUG_FLAG=0

SB_BASHLOG_FILE="${my_logdir}/${dateflag}/action.${randflag}.log"
SB_ARCHIVE_FILE="${my_logdir}/${dateflag}/archivelist.${randflag}.log"
mkdir -p "$( dirname "${SB_BASHLOG_FILE}" )"

# =================================================
# Help function
# =================================================
_do_endscript() {
    echo "FAILED."
    exit 1
}

_datefmt() {
    date +'%Y-%m-%d %H:%M:%S'
}


_show_help() {
    local exitcode
    exitcode=${1}
    if [[ ! -z "${2}" ]]; then
        echo "Error: ${2}"
        echo ""
    fi  
    echo "feral2ashwini: Archive files/directories from feral to ashwini"
    echo "Usage:"
    echo "    feral2ashwini <dirlist> <config> [rutorrent_tag]"
    echo ""
	echo "The source and target paths are hardcoded in the <config>"
    echo "Currently this script only works on moving directories specified"
    echo "in the config file." 
    echo "    dirlist:  path of a file containing the list of files/directories"
    echo "              which should be archived. These files/directories must be"
    echo "              available in the source path specified in the config."
    echo "              Special flags:"
    echo "              - 'all'      : download completed files/directories"
    echo "              - 'inactive' : inactive for last 6 hours"
    echo "    config:   configuration file located in ~/usr/archive-config/<config>.cfg"
    echo "              Source configurations include:"
    echo "              - 'tv'        : ~/downloads/tv"
    echo "              - 'btn-spam'  : ~/downloads/btn-spam"
    echo "              - 'btn-packs' : ~/uploads/btn-packs"
    echo "    tag:      Label for rutorrent in ashwini (optional)"
    echo ""
    [[ $exitcode == 0 ]] && exit 0 || exit 1
}


# =================================================
# Input arguments
# =================================================
dirlist_file="${1}"
config_name="${2}"
archive_rt_tag="${3}"


# =================================================
# Process input, check errors
# =================================================
if [[ -z "${config_name}" ]] || [[ -z "${dirlist_file}" ]]; then
	_show_help 1 "Wrong arguments for this command. Please check usage."
fi

# From the configuration file,
# the following global variables are obtained:
#
# ARCHIVE_SOURCE_DATAPATH
# ARCHIVE_TARGET_DATAPATH
# ARCHIVE_TARGET_METAPATH
#
if [[ -f "${my_configdir}/${config_name}.cfg" ]]; then
    source "${my_configdir}/${config_name}.cfg"
else
    _show_help 1 "Configuration file ${my_configdir}/${config_name}.cfg not found. Exiting."
fi

# We need a local temporary directory before anything else
# tempdir=$( mktemp --tmpdir="${my_tmpdir}" -d "${config_name}".XXX )
# double quotes expands now rather than when signalled
# trap "rm -rf ${tempdir}" EXIT INT QUIT TERM
# As of now do not remove temporary directory / debug required
tempdir="${my_tmpdir}/${config_name}.${randflag}"
mkdir -p "${tempdir}"

# Get the dirlist file
# create a temporary file to keep a copy of the input file
#
tempfile_targetlist=$( mktemp --tmpdir="${tempdir}" targetlist.XXX.txt )
trap "rm -f ${tempfile_targetlist}" EXIT INT QUIT TERM

#
# Take the input from rtcontrol and keep only the relative path.
# Remove '.' from list | reason: error-ed torrents will not show any path
# Sort and keep unique values | reason: cross-seeding same file in multiple trackers
#
function _unique_relative_input() {
    while read -r -d$'\n' fpath
    do 
        echo "$( realpath "${fpath}" --relative-to="${ARCHIVE_SOURCE_DATAPATH}" )"
    done |  grep -v -e '^\.$' | sort | uniq 
}

if [[ "${dirlist_file}" == "all" ]]; then
    _filelog "$( _datefmt ) : Archive all completed data in ${ARCHIVE_SOURCE_DATAPATH}"
    rt-completed "${ARCHIVE_SOURCE_DATAPATH}" | _unique_relative_input > "${tempfile_targetlist}"
	if grep -q "/" "${tempfile_targetlist}"; then
		_filelog "$( _datefmt ) : ERROR. 'all' flag cannot handle subdirectories. Provide explicit directory list file."
		exit 1
	fi
#
elif [[ "${dirlist_file}" == "inactive" ]]; then
    _filelog "$( _datefmt ) : Archive all completed and inactive data in ${ARCHIVE_SOURCE_DATAPATH}"
    rt-completed-inactive "${ARCHIVE_SOURCE_DATAPATH}" | _unique_relative_input > "${tempfile_targetlist}"
	if grep -q "/" "${tempfile_targetlist}"; then
		_filelog "$( _datefmt ) : ERROR. 'inactive' flag cannot handle subdirectories. Provide explicit directory list file."
		exit 1
	fi
#
else
	if [[ ! -f "${dirlist_file}" ]]; then 
		_show_help 1 "Input file ${dirlist_file} not found. Exiting."
	fi
	_filelog "$( _datefmt ) : Archive data specified in ${dirlist_file}"
	cat "${dirlist_file}" > "${tempfile_targetlist}"
fi

# =================================================
# useful functions, snippets
# =================================================

# ensure directory is created in remote before transfer
# should wait until connection is available
#
# By default, ssh reads from stdin.
# therefore it will consume the rest of the code
# if stdin is not redirected from dev/null
#     ssh remote "command" < /dev/null
# This is the same as using
#     ssh -n remote "command"
#     https://stackoverflow.com/q/9393038
#     
# 
function _ensure_remote_dir() {
    # take care of whitespace in directory name
    local target
    local retry_count
    local cmdstatus
    target=$( printf '%q' "${1}" )
    retry_count=0
    while [ true ]
    do
        ssh -n ashwini "mkdir -p ${target}"
        cmdstatus=$?
        if [[ ${cmdstatus} -eq 0 ]]; then
            _filelog "$( _datefmt ) : Remote directory created | ashwini:${target}"
            return 0 
        else
            retry_count=$(( ${retry_count} + 1  ))
            _filelog "$( _datefmt ) : ERROR in creating remote directory | ashwini:${target}"
            _filelog "$( _datefmt ) : exit code ${cmdstatus} | backoff and retry ${retry_count}"
        fi
        sleep 5
    done
}


# ensure all metafiles for a target path
# are collected from rtorrent
# 
# Usage:
#     _collect_metafiles <datapath> <metapath>
#         where <datapath> can be a file or directory.
#
function _collect_metafiles() {
    local datapath
    local data_parentdir
    local escaped_datapath
    local metapath
    local rt_session_dir
    local mhash
    local fpath
    local relpath
    local rtmpath
    datapath="${1%/}" # remove slash from end of path, if present
    metapath="${2%/}" # remove slash from end of path, if present
    rt_session_dir=$( realpath "$( rtxmlrpc session.path )" )

    # clean up any existing directory from previous / failed runs
    # start fresh every time
    [[ -d "${metapath}" ]] && rm -rf "${metapath}"
    mkdir -p "${metapath}"
    touch "${metapath}/info.txt" # empty file in case there's no data

    # list all torrents in rtorrent session in the given path
	data_parentdir=$( dirname "${datapath}" )
    # escape special characters
    # replace special characters with dot for pattern matching
    # ** Important **
    # This is required because some special characters like ,!&
    # are not handled in pyrocore (rtcontrol).
	#escaped_datapath=$( printf '%q' "${datapath}" | sed 's/\\././g;s/+/./g' )
    _dbglog "Path Selector: $( _rt_path_selector "${datapath}" )"
	rtcontrol -qo 'hash,path' $( _rt_path_selector "${datapath}" ) | while read -r -d$'\n' rtinfo
    do
        mhash=$( echo "${rtinfo}" | cut -f1 )
        _dbglog "Hash: ${mhash}"
        fpath=$( echo "${rtinfo}" | cut -f2 )
        _dbglog "Path to data: ${fpath}"
        # we need the relative path to load properly in the remote machine
        relpath=$( realpath "${fpath}" --relative-to="${data_parentdir}" )
        _dbglog "Relative path to data: ${relpath}"
        # find the torrent from the session directory
        rtmpath="${rt_session_dir}"/"${mhash}.torrent"
        _dbglog "Path to metafile: ${rtmpath}"
        # Force copy in the metafile storage
        cp -f "${rtmpath}" "${metapath}/"
        # Store the information in a separate file
        echo -e "${mhash}\t${relpath}" >> "${metapath}/info.txt"
    done
    sleep 1

    # resolve hard links --
    # Are there other files on the disk which are being seeded
    # with filenames matching those in the directory?
    # Collect them as well!
    # this can be done by searching for names (instead of path) in rtorrent!
    # Better solution is: find . -samefile
    # but that is also more convoluted
    if [[ -d "${datapath}" ]]; then
        find "${datapath}/" -type f -print0 | while read -r -d $'\0' fpath
        do
            fname=$( basename "${fpath}" )
            name_selector=$( _rt_name_selector "${fname}" )
            mhash=$( rtcontrol -qo 'hash' "${name_selector}")
            # if there is an existing hash
            if [[ "${mhash}" =~ [0-9a-fA-F]{40} ]]; then
                # which is not already included
                if ! grep -q "${mhash}" "${metapath}/info.txt"; then
                    relpath=$( realpath "${fpath}" --relative-to="${data_parentdir}" )
                    rtmpath="${rt_session_dir}"/"${mhash}.torrent"
                    cp -f "${rtmpath}" "${metapath}/"
                    echo -e "${mhash}\t${relpath}" >> "${metapath}/info.txt"
                fi
            fi
        done
    fi
    sleep 1

    # wait for files to copy
    # Note the single quotes around file expression to stop bash expanding wildcards.
    local n_copied
    local n_count
    n_copied=$( find "${metapath}/" -type f -name '*.torrent' | wc -l )
    n_count=$( wc -l < "${metapath}/info.txt" ) 
    while [[ "${n_copied}" -ne "${n_count}" ]]
    do
        sleep 1
        n_copied=$( find "${metapath}/" -type f -name '*.torrent' | wc -l )
    done
    _filelog "$( _datefmt ) : Collected ${n_count} torrent metafile(s) for ${datapath}"
}


function _transfer_metafiles() {
    #
    # send the directory to ashwini
	# wrapper for _ensure_rsync to check if there are any actual metafiles
	local metapath
	local remotepath
    local n_count
	metapath="${1}" 
	remotepath="${2}"
	n_count=$( cat "${metapath}/info.txt" | wc -l )
    _filelog "$( _datefmt ) : Sending metafiles to remote archive."
	if [[ "${n_count}" -eq 0 ]]; then
        _filelog "$( _datefmt ) : ERROR | No torrent files in session for $( basename "${metapath}" )"
        return 1
    else
        _ensure_rsync "${metapath}" "${remotepath}" && return 0 || return 1
    fi
}

#
# allow loading rtorrent to remote client to fail with dodgy connections
# function _load_remote_rt() {
#     # name of the file / directory can have spaces
#     #printf -v target %q "${@}"
#     local target="${1}"
#     local metapath="${ARCHIVE_TARGET_METAPATH}/${target}"
#     local datapath="${ARCHIVE_TARGET_DATAPATH}/${target}"
#     _vlog "    Load torrents in remote client."
#     echo "Waiting for response from remote machine ..."
#     ssh -n ashwini 'loadtorrents "'${metapath}'" "'${datapath}'" "'${archive_rt_tag}'"'
#     echo ""
# }


function _load_remote_client() {
	local metapath
	local datapath
	local rt_tag
	metapath="${1}"
	datapath="${2}"
	rt_tag="${3}"
	_filelog "$( _datefmt ) : Loading metafiles in remote client"
	ssh -n ashwini 'loadtorrents "'${metapath}'" "'${datapath}'" "'${rt_tag}'"' | \
        while read -r remote_response
        do 
            _filelog "    [ashwini: $(date +'%H:%M:%S')] ${remote_response}"
        done
}	


function _clean_local_client() {
    local metapath
    local rtinfo
    local mhash
    local fpath
    metapath="${1%/}"
	while read -r rtinfo
	do
		mhash=$( echo "${rtinfo}" | cut -f1 )
		fpath=$( echo "${rtinfo}" | cut -f2 )
        _filelog "$( _datefmt ) : Removing torrent from client | ${fpath}"
		rtcontrol 'hash='"${mhash}" --quiet --delete --yes
	done < "${metapath}/info.txt"
}


function _clean_local_data() {
    local sourcepath
    sourcepath="${1}"
    _filelog "$( _datefmt ) : Removing data from disk | ${sourcepath}"
    rm -rf "${sourcepath}"
    _vlog "    =============================================="
    _vlog "    Archive complete."
    _vlog "    Cleaned ${sourcepath}"
    _vlog "    =============================================="
    _vlog ""
}


function _get_announce_domain() {
    echo "$( lstor -qo announce "${1}" | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/' )"
}


# #################################################
# MAIN PROCESS STARTS HERE
# #################################################

remotehost="ashwini"
remotepath="${ARCHIVE_TARGET_DATAPATH}"
remote_metapath="${ARCHIVE_TARGET_METAPATH}"

# =================================================
# Loop over directories
# =================================================
#if false; then # <-- my debug hack
while read -r target; do
	localpath="${ARCHIVE_SOURCE_DATAPATH}/${target}"
	local_metapath="${tempdir}/metafiles/${target}"

	_filelog "$( _datefmt ) : Archive | ${localpath}"
	_filelog "$( _datefmt ) : Destination | ${remotehost}:${remotepath}"
    #
    # Do the file/directory exist?
    if [[ ! -e "${localpath}" ]]; then
        _filelog "$( _datefmt ) : ERROR No such file or directory ${localpath}"
        continue
    fi
	#
	# create remote directory where the file will be transferred
	_ensure_remote_dir "${remotepath}" || continue

	#
	# transfer all files in 'target'
	_ensure_recursive_rsync "${localpath}" "${remotehost}:${remotepath}" || continue

	#
	# transfer all metafiles for 'target'
	_collect_metafiles  "${localpath}" "${local_metapath}" || continue
	_transfer_metafiles "${local_metapath}" "${remotehost}:${remote_metapath}/" || continue

	#
	# load metafiles in remote 
	_load_remote_client "${remote_metapath}/${target}" "${remotepath}" "${archive_rt_tag}" || continue

	#
	# cleanup local client
	_clean_local_client "${local_metapath}" || continue
	_clean_local_data   "${localpath}" || continue
    #
    # write to logfile
    echo "${localpath}" >> "${SB_ARCHIVE_FILE}"
	

done < "${tempfile_targetlist}"
#fi

# =================================================
# Set proper permissions for media server
# =================================================
#ssh -n ashwini 'set-media-permission'

# =================================================
# Clean up temporary files
# =================================================
# rm -f ${tempfile_hashinfo}
# rm -f "${tempfile_targetlist}"
# rm -rf "${tempdir}"
