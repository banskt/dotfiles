#!/usr/bin/env bash


# Usage
#     data-archive <config> <dirlist_file> [tag]
# Arguments
#     <config> name of configuration used to define global variables
#         can be any one of: btn_season_pack, tv, movie_bengali, movie_english, movie_hindi, movie_foreign
#     <dir_list_file> string for the path of a file containing list of directories to be archived
#         special string: 'all' to archive everything in the directory
#     [tag] optional string used as a tag for rutorrent in ashwini
#     

# In this script, quoting is important as filenames
# are involved. Invariably, there are bugs
# which I will fix as I keep working on this. 
# Here are some references
#     https://stackoverflow.com/q/10067266
#     https://stackoverflow.com/q/29142
# A robust alternative is to use a file descriptor
#     https://stackoverflow.com/a/66179139
#
# Naming convention
#     https://stackoverflow.com/q/673055
#
#

# =================================================
# Logging functions
# =================================================
function _mlog() {
    echo "${@}" >> ${LOGFILE}
}

function _vlog() {
    { _is_verbose && echo "${@}"; } || return 0
}

function _is_verbose() {
    [[ "$VERBOSE_FLAG" == 1 ]] || return 1
}

_show_help() {
    exitcode=${1}
    if [[ ! -z "${2}" ]]; then
        echo "Error: ${2}"
        echo ""
    fi  
    echo "feral2ashwini: Archive files/directories from feral to ashwini"
    echo "Usage:"
    echo "    feral2ashwini <dirlist> <config> [rutorrent_tag]"
    echo ""
	echo "The source and target paths are hardcoded in the <config>"
    echo "Currently this script only works on moving directories specified"
    echo "in the config file." 
    echo "    dirlist:  path of a file containing the list of directories"
    echo "              which should be archived. These directories must be"
    echo "              available in the source path specified in the config."
    echo "              Hint: use 'all' for archiving all directories from the"
    echo "              source path"
    echo "    config:   configuration file located in ~/usr/archive-config/<config>.cfg"
    echo "              Source configurations include:"
    echo "              - 'tv' : ~/downloads/tv"
    echo "              - 'btn-packs' : ~/uploads/btn-packs"
    echo "    tag:      Label for rutorrent in ashwini (optional, default=BTNarXiv)"
    echo ""
    [[ $exitcode == 0 ]] && exit 0 || exit 1
}


# =================================================
# Input arguments
# =================================================
_dirlist_file="${1}"
_config_name="${2}"
_archive_rt_tag="${3}"


# =================================================
# Fixed arguments
# =================================================
VERBOSE_FLAG=1
RTORRENT_SESSION_DIR="${HOME}/private/rtorrent/work"
LOCAL_TMPDIR="${HOME}/usr/tmp/archive"
LOGFILE="${HOME}/usr/logs/data-archive.log"


# =================================================
# Process input, check errors
# =================================================
if [[ -z "${_config_name}" ]] || [[ -z "${_dirlist_file}" ]]; then
	errmsg="Wrong arguments for this command. Please check usage."
	_show_help 1 "${errmsg}"
fi

# We need a local temporary directory before anything else
if [[ ! -d ${LOCAL_TMPDIR} ]]; then
    _mlog "$( date ) : Directory ${LOCAL_TMPDIR} does not exist." 
    mkdir -p ${LOCAL_TMPDIR} || exit 1
fi

# From the configuration file,
# the following global variables are obtained:
#
# ARCHIVE_SOURCE_DATAPATH
# ARCHIVE_TARGET_DATAPATH
# ARCHIVE_TARGET_METAPATH
# TO_REMOVE_FILE
#
if [[ -f "${HOME}/usr/archive-config/${_config_name}.cfg" ]]; then
    source ${HOME}/usr/archive-config/${_config_name}.cfg
else
    errmsg="Configuration file ${HOME}/usr/archive-config/${_config_name}.cfg not found. Exiting."
    _show_help 1 "${errmsg}"
fi

# Get the dirlist file
# create a temporary file to keep a copy of the input file
#
TMP_ARCHIVE_TODO=$( mktemp --tmpdir="${LOCAL_TMPDIR}" arxivfiles.XXX.txt )
trap "rm -f ${TMP_ARCHIVE_TODO}" EXIT INT QUIT TERM

if [[ "${_dirlist_file}" == "all" ]]; then
    _vlog "Preparing to archive all packs in ${ARCHIVE_SOURCE_DATAPATH}"
	find ${ARCHIVE_SOURCE_DATAPATH}/ -maxdepth 1 -mindepth 1 -printf "%f\n" | sort > ${TMP_ARCHIVE_TODO}
    cp ${TMP_ARCHIVE_TODO} ~/debug-archive.txt
else
	if [[ ! -f "${_dirlist_file}" ]]; then 
		errmsg="Input file ${_dirlist_file} not found. Exiting"
		_show_help 1 "${errmsg}"
	fi
	_vlog "Preparing to archive packs specified in ${_dirlist_file}"
	cat "${_dirlist_file}" > "${TMP_ARCHIVE_TODO}"
fi

# Some other temporary files to use
#
TMP_HASH_INFO=$( mktemp --tmpdir="${LOCAL_TMPDIR}" hash2name.XXX.txt )
trap "rm -f ${TMP_HASH_INFO}" EXIT INT QUIT TERM

# =================================================
# useful functions, snippets
# =================================================

# ashwini / feral can have dodgy connections
# ensure that the rsync works
# Example usage:
#     _ensure_rsync source_file ashwini:target_file
#     _ensure_rsync "source_file\ with\ spaces" "ashwini:target_file\ with\ spaces"
#
function _ensure_rsync() {
    local fsource="${1}"
    local ftarget="${2}"
    local retry_count=0
    while [ true ]
    do
        # somehow fails for escaped characters
        # rsync has a built in flag 
        # -s, --protect-args          no space-splitting; only wildcard special-chars
        rsync -avz -s -q --partial --progress --append-verify --timeout=300 "${fsource}" "${ftarget}"
        local cmdstatus=$?
        if [[ ${cmdstatus} -eq 0 ]]; then
            # rsync successful
            _mlog "$( date ) : rsync success | ${fsource}"
            return 0
        else
            retry_count=$(( ${retry_count} + 1  ))
            _mlog "$( date ) : rsync fail | ${fsource}"
            _mlog "$( date ) : exit code ${cmdstatus} | backoff and retry ${retry_count}"
        fi
        sleep 5
    done
}

# ensure directory is created in remote before transfer
# should wait until connectio is available
#
# By default, ssh reads from stdin.
# therefore it will consume the rest of the code
# if stdin is not redirected from dev/null
#     ssh remote "command" < /dev/null
# This is the same as using
#     ssh -n remote "command"
#     https://stackoverflow.com/q/9393038
#     
# 
function _ensure_remote_dir() {
    # take care of whitespace in directory name
    printf -v target %q "${@}"
    local retry_count=0
    while [ true ]
    do
        #ssh -n ashwini 'mkdir -p "'${ARCHIVE_TARGET_DATAPATH}'"/"'${target}'"'
        ssh -n ashwini "mkdir -p ${ARCHIVE_TARGET_DATAPATH}/${target}"
        local cmdstatus=$?
        if [[ ${cmdstatus} -eq 0 ]]; then
            _mlog "$( date ) : ${target} | remote directory created"
            return 0 
        else
            retry_count=$(( ${retry_count} + 1  ))
            _mlog "$( date ) : ${target} | remote directory creation failed"
            _mlog "$( date ) : exit code ${cmdstatus} | backoff and retry ${retry_count}"
        fi
        sleep 5
    done
}

# do not rsync whole directory at once due to dodgy connection
# break stuff into single transfers,
# so it is easier to debug / restart if something goes wrong
#
function _ensure_recursive_archive() {
    # take care of whitespace in directory name
    #printf -v target %q "${@}"
    # `find` does not require escaping
    # just put everything in quotes 
    # (otherwise `find` will escape the escaping characters,
    # (e.g. john\'s --> john\\'s)
    local target="${1}"
    local sourcepath="${ARCHIVE_SOURCE_DATAPATH}/${target}"

    _vlog "Name of season pack: ""${target}"
    _vlog "Source path: ""${sourcepath}"
    _vlog "    ------------------------------------"
    # the results of find can have white space, never loop over them
    # the following solution will still fail for newline characters in filename
    # but that is an extremely rare case
    #    https://stackoverflow.com/q/9612090
    find "${sourcepath}/" -maxdepth 1 -mindepth 1 -print0 | while read -r -d $'\0' fpath
    do
        # need the basename for creating remotepath
        fbasepath="$( basename "${fpath}" )"
        # Escaping characters for rsync did not work
        # An elegant solution was to use the -s flag for rsync
        #printf -v localpath %q "${fpath}"
        #printf -v remotepath %q "${ARCHIVE_TARGET_DATAPATH}/${target}/${fbasepath}"
        localpath="${fpath}"
        remotepath="${ARCHIVE_TARGET_DATAPATH}/${target}/${fbasepath}"
        _vlog "    Archive ${localpath}"
        _vlog "    Target  ${remotepath}"
        _vlog "    ------------------------------------"
        _ensure_rsync "${localpath}" "ashwini:${remotepath}"
    done
}


function _transfer_metafiles() {
    local target="${1}"
    local metadir="${LOCAL_TMPDIR}/${target}"
    local sourcepath="${ARCHIVE_SOURCE_DATAPATH}/${target}"
    _vlog "    Collecting torrent metafiles."
    _vlog "    Storing in ${metadir}"

    # clean up any existing directory from previous / failed runs
    [[ -d ${metadir} ]] && rm -rf ${metadir}
    mkdir -p "${metadir}/season" "${metadir}/episodes"

    # list all season torrents in rtorrent session
    grep -F "${target}" ${TMP_HASH_INFO} >> "${metadir}/season.hash.txt"

    # list all episode torrents in rtorrent session
    find "${sourcepath}/" -type f -print0 | while read -r -d $'\0' fpath
    do
        local fbasepath="$( basename "${fpath}" )"
        grep -F "${fbasepath}" ${TMP_HASH_INFO} >> "${metadir}/episodes.hash.txt"
    done
    # One time, the grep returned all torrent files many times over.
    # I am adding a check to ensure that the number of files
    # listed in the text files is not abnormal.
    # Abort if that happens and wait for human intervention
    #
    # collect all season torrents
    if [[ -f "${metadir}/season.hash.txt" ]]; then
        local season_count=$( wc -l "${metadir}/season.hash.txt" | cut -f1 -d' ' )
        [[ "${season_count}" -gt 50 ]] && { echo "Too many torrent files, please check manually." && return 1; }
        while read -r line; do
            local _hash=$( echo $line | cut -f1 -d' ' )
            local _hashfile="${RTORRENT_SESSION_DIR}/${_hash}.torrent"
            [[ -f "${_hashfile}" ]] && cp "${_hashfile}" "${metadir}/season/"
        done < "${metadir}/season.hash.txt"
    fi
    #
    # collect all episode torrents
    if [[ -f "${metadir}/episodes.hash.txt" ]]; then
        local episode_count=$( wc -l "${metadir}/episodes.hash.txt" | cut -f1 -d' ' )
        [[ "${episode_count}" -gt 200 ]] && { echo "Too many torrent files, please check manually." && return 1; }
        while read -r line; do
            local _hash=$( echo $line | cut -f1 -d' ' )
            local _hashfile="${RTORRENT_SESSION_DIR}/${_hash}.torrent"
            [[ -f "${_hashfile}" ]] && cp "${_hashfile}" "${metadir}/episodes/"
        done < "${metadir}/episodes.hash.txt"
    fi
    # sync # wait for files to copy
    # another way is to loop over them
    _vlog "    Looking for torrent files in ${metadir}/"
    local copied_season=0
    local copied_episode=0
    while [[ "${copied_season}" -ne "${season_count}" ]] && [[ "${copied_episode}" -ne "${episode_count}" ]]
    do
        # Note the single quotes around file expression to stop bash expanding wildcards.
        copied_season=$( find "${metadir}/season/" -type f -name '*.torrent' | wc -l )
        copied_episode=$( find "${metadir}/episodes/" -type f -name '*.torrent' | wc -l )
        sleep 1
    done
    #
    # send this directory to ashwini
    if [[ "${season_count}" -eq 0 ]] && [[ "${episode_count}" -eq 0 ]]; then
        _vlog "    Could not find any torrent file in ${metadir}/"
        _mlog "$( date ) : ${target} | no torrent files found from session"
        return 1
    else
        _vlog "    Send metafiles to remote archive."
        _ensure_rsync "${metadir}" "ashwini:${ARCHIVE_TARGET_METAPATH}/"
        return 0
    fi
}


# allow loading rtorrent to remote client to fail with dodgy connections
function _load_remote_rt() {
    # name of the file / directory can have spaces
    #printf -v target %q "${@}"
    local target="${1}"
    local metapath="${ARCHIVE_TARGET_METAPATH}/${target}"
    local datapath="${ARCHIVE_TARGET_DATAPATH}/${target}"
    _vlog "    Load torrents in remote client."
    echo "Waiting for response from remote machine ..."
    ssh -n ashwini 'btn-archive-load2rt "'${metapath}'" "'${datapath}'" "'${_archive_rt_tag}'"'
    echo ""
}


function _delete_from_client_allfiles_in_dir() {
    local metadir="${1}"
    find "${metadir}/" -regextype sed -regex '^'${metadir}'/[0-9a-fA-F]\{40\}\.torrent' -type f -print0 | while read -r -d $'\0' metapath
    do
        fname="$( basename ${metapath} )"
        _hash=${fname%.torrent}
        _vlog "    Remove from client $_hash | ${fname}"
        rtcontrol hash=${_hash} --quiet --delete --yes
    done
}


function _clean_local_rt() {
    local target="${1}"
    local metadir="${LOCAL_TMPDIR}/${target}"
    ## Remove episodes before season
    _delete_from_client_allfiles_in_dir "${metadir}/episodes"
    _delete_from_client_allfiles_in_dir "${metadir}/season"
}


function _clean_local_data() {
    local to_remove="${ARCHIVE_SOURCE_DATAPATH}/${1}"
    echo "${to_remove}" >> "${TO_REMOVE_FILE}"
    _vlog "    =============================================="
    _vlog "    Archive complete."
    _vlog "    Remove ${to_remove}"
    _vlog "    But this script is beta, so deletely manually."
    _vlog "    =============================================="
    _vlog ""
}

function _get_announce_domain() {
    echo $( lstor -qo announce ${1} | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/' )
}


# #################################################
# MAIN PROCESS STARTS HERE
# #################################################

# =================================================
# Map hash to file names for easy access
# =================================================
_vlog "Collecting hash information from torrent metafiles."
rtcontrol -qo hash,name \* >> ${TMP_HASH_INFO}
#find "${RTORRENT_SESSION_DIR}/" -regextype sed -regex '^'${RTORRENT_SESSION_DIR}'/[0-9a-fA-F]\{40\}\.torrent' -type f -print0 | while read -r -d $'\0' metafile
#do
#    lstor -qo __hash__,info.name ${metafile} >> ${TMP_HASH_INFO}
#done


# =================================================
# Loop over directories
# =================================================
#if false; then # <-- my debug hack
while read -r target; do
if [[ -d "${ARCHIVE_SOURCE_DATAPATH}/${target}" ]]; then
    echo "Archiving ${target}"
    #
    # Create remote directory
	if ( _ensure_remote_dir "${target}" ); then
        #
	    # transfer downloaded files
	    if ( _ensure_recursive_archive "${target}" ); then
            #
	        # trasnfer torrent meta files
	        # add torrent files to ashwini rtorrent client
	        { _transfer_metafiles "${target}" && _load_remote_rt "${target}"; } \
                || _mlog "$( date ) : ${target} | Error in loading torrents in ashwini"
            #
	        # remove torrents from local rtorrent client
            # clean data from local site
	        { _clean_local_rt "${target}" && \
                _mlog "$( date ) : ${target} | Local torrents removed" && \
                _clean_local_data "${target}" && \
                _mlog "$( date ) : ${target} | Local data removed";
            } || _mlog "$( date ) : ${target} | Error in cleaning local data"
	    fi
	else
	    _mlog "$( date ) : ${target} | Error Could not create target path in ashwini"
	fi
fi
done < ${TMP_ARCHIVE_TODO}
#fi

# =================================================
# Clean up temporary files
# =================================================
rm -f ${TMP_HASH_INFO}
rm -f ${TMP_ARCHIVE_TODO}
