# non-root user for worker
user  minion;

pid 		/home/banskt/local/etc/nginx/worker/nginx.pid;
error_log 	/home/banskt/local/etc/nginx/worker/logs/error.log;

# set worker processes based on CPU cores, 
# nginx does not benefit from setting more than that
# 3 vCPUs -- 1 for master, 2 for worker
worker_processes  2;

# maximum number of open files (RLIMIT_NOFILE) for worker processes.
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 8192;

# provides the configuration file context 
# in which the directives that affect connection processing are specified.
events {

    # maximum number of simultaneous connections 
    # that can be opened by a worker process.
    worker_connections  4096; # default 1024

    # specify the connection processing method
    # There is normally no need to specify it explicitly,
    # because nginx will by default use the most efficient method. 
    # Availabe methods: http://nginx.org/en/docs/events.html
    use epoll;

    # if disabled, a worker process will accept one new connection at a time.
    multi_accept on; # default off

}

http {
    map $status $loggable {
        ~^[23]  0;
        default 1;
    }
    
    log_format compression '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" "$gzip_ratio"';

    # setup temp paths for the worker process
    # should be accessible by the defined user.
    client_body_temp_path	/home/banskt/local/etc/nginx/worker/client_body;
    fastcgi_temp_path		/home/banskt/local/etc/nginx/worker/fastcgi;
    uwsgi_temp_path		/home/banskt/local/etc/nginx/worker/uwscgi;
    scgi_temp_path		/home/banskt/local/etc/nginx/worker/scgi;
    proxy_temp_path		/home/banskt/local/etc/nginx/worker/proxy;

    # configure a cache to store open FDs, sizes and modification times;
    # information on existence of directories,
    # file lookup erros, such as “file not found”, “no read permission”, and so on.
    # 	
    # can boost performance, but you need to test those values
    # nobody actually knows how to test: https://serverfault.com/q/460275
    # trial and error
    open_file_cache max=1000 inactive=30s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Map file name extensions to MIME types of responses. 
    # Extensions are case-insensitive.
    include       mime.types;
    default_type  application/octet-stream;

    # To boost I/O on HDD we can disable access logs.
    # This alone can give you a very high performance jump.
    # Make sure you don't need it though!
    # access_log off;
    access_log /home/banskt/local/etc/nginx/worker/logs/access.log compression if=$loggable ;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;
    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;
    # AIO enables or disables the use of asynchronous file I/O
    # On Linux, AIO can be used starting from kernel version 2.6.22.
    # When both AIO and sendfile are enabled on Linux, 
    # AIO is used for files that are larger than or equal to the size 
    # specified in the directio directive, while sendfile is used for 
    # files of smaller sizes or when directio is disabled. 
    aio on;
    directio 512;

    # reduce the data that needs to be sent over network
    # https://nginx.org/en/docs/http/ngx_http_gzip_module.html
    # https://docs.nginx.com/nginx/admin-guide/web-server/compression/
    gzip on;
    # gzip_static on;
    gzip_min_length 1024;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    # allow the server to close connection on 
    # non responding client, this will free up memory
    # default off
    reset_timedout_connection on;

    # timeout for reading client request body
    # default 60
    client_body_timeout 30;

    # if client stop responding, free up memory
    # default 60;
    send_timeout 10;

    # server will close connection after this time
    # default 75
    keepalive_timeout 30;

    # maximum number of requests that can be served 
    # through one keep-alive connection
    # default 1000
    keepalive_requests 131072;

    # Proxy configuration
    include proxy.conf;

    # This is my local nginx html which came as default.
    # The localhost will show the nginx welcome page.
    server {
        server_name  127.0.0.1;
        listen       *:80;
	listen       [::]:80;
        location / {
            root   html;
            index  index.html index.htm;
        }
        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    # All other servers are included by the active user
    include /home/banskt/local/etc/nginx/sites-enabled/*;
}
